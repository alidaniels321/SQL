/* In this project, I analyze the data pertaining to several movie stars.*/
/* I look into various personal data points as well as their professional connections */

CREATE TABLE famous_people (id INTEGER PRIMARY KEY,
    name TEXT, 
    age NUMERIC, 
    number_of_movies INTEGER);

INSERT INTO famous_people VALUES (1, "Daniel Radcliffe", 33, 35);
INSERT INTO famous_people VALUES (2, "Sandra Bullock", 58, 45);
INSERT INTO famous_people VALUES (3, "Maggie Smith", 87, 52);
INSERT INTO famous_people VALUES (4, "Dan Stevens", 40, 30);
INSERT INTO famous_people VALUES (5,"Emma Watson", 34, 22);
INSERT INTO famous_people VALUES (6, "Gary Oldman", 64, 72);

CREATE TABLE movies (person_id INTEGER,
    first_movie TEXT,
    first_movie_release_year INTEGER,
    most_recent_movie TEXT);

INSERT INTO movies VALUES (1, "The Tailor of Panama", 2001, "Weird: The Al Yankovic Story");
INSERT INTO movies VALUES (2, "Hangmen", 1987, "Bullet Train");
INSERT INTO movies VALUES (3, "Nowhere to Go", 1958, "Downton Abbey: A New Era");
INSERT INTO movies VALUES (4, "Dracula", 2006, "The Sea Beast");
INSERT INTO movies VALUES (5,"Harry Potter and the Sorcerer's Stone", 2001, "Little Women" );
INSERT INTO movies VALUES (6, "Remembrance", 1982, "Oppenheimer");


CREATE TABLE worked_together (id INTEGER PRIMARY KEY,
    actor1_id INTEGER, 
    actor2_id INTEGER, 
    movie_title TEXT);

INSERT INTO worked_together VALUES (1, 1, 2, "The Lost City");
INSERT INTO worked_together VAlUES (2, 3, 4, "Downton Abbey: Christmas at Downton Abbey");
INSERT INTO worked_together VALUES (3, 5, 6, "What to expect when you're expecting");
INSERT INTO worked_together VALUES (4, 1, 3, "Harry Potter and the Order of the Phoenix");
INSERT INTO worked_together VALUES (5, 2, 3, "Divine Secrets of the Ya-Ya Sisterhood");

/*This table shows the number of movies each star has been cast in in descending order*/

SELECT * FROM famous_people 
    ORDER BY number_of_movies desc;

/* This table joins two tables to show all of the given information in one place */

SELECT f.name, f.number_of_movies, m.most_recent_movie, m.first_movie, m.first_movie_release_year 
    FROM famous_people f
    JOIN movies m
    ON f.id = m.person_id
    ORDER by first_movie_release_year asc;

/* This table uses two joins (including a self-join) to create a list of the movies each star has acted in with another star. Some of the results were surprising.*/

SELECT a.name, b.name, worked_together.movie_title
    FROM worked_together
    JOIN famous_people a
    ON worked_together.actor1_id = a.id
    JOIN famous_people b
    ON worked_together.actor2_id = b.id;
